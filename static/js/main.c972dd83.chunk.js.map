{"version":3,"sources":["components/layout/footer.js","components/layout/header.js","components/layout/main.js","components/layout/page-wrapper.js","theme/theme.js","components/progress/progress-bar.js","components/fsm/state-list.js","components/fsm/action-buttons.js","components/fsm/fsm.js","App.js","serviceWorker.js","index.js"],"names":["Footer","styled","footer","theme","palette","iron","moss","spacing","Header","Main","main","snow","PageWrapper","div","silver","cardinal","carmine","borderRadius","ProgressBarWrapper","percentage","width","ProgressBar","defaultProps","StatesWrapper","StatesTitle","StatesList","StatesListItem","span","active","undefined","States","children","ActionButtonGroup","ActionButton","button","MachineWrapper","Fsm","props","machine","useStateMachine","zero","on","START","running","PAUSE","RESET","END","paused","complete","useState","progress","setProgress","useEffect","state","transition","interval","setInterval","clearInterval","handleChangeState","action","e","actions","all","map","key","onClick","disabled","available","includes","Object","keys","flow","s","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c972dd83.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const Footer = styled.footer(\n    ({ theme }) => `\n        background-color: ${ theme.palette.iron };\n        color: ${ theme.palette.moss };\n        padding: ${ theme.spacing };\n    `\n)\n","import styled from 'styled-components'\n\nexport const Header = styled.footer(\n    ({ theme }) => `\n        background-color: ${ theme.palette.iron };\n        color: ${ theme.palette.moss };\n        padding: ${ theme.spacing };\n    `\n)\n","import styled from 'styled-components'\n\nexport const Main = styled.main(\n    ({ theme }) => `\n        background-color: ${ theme.palette.snow };\n        color: ${ theme.palette.iron };\n        padding: ${ theme.spacing };\n        flex: 1;\n    `\n)","import styled from 'styled-components'\n\nexport const PageWrapper = styled.div`\n    // & * { border: 1px solid #f99; }\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n`\n","export const theme = {\n    palette: {\n        iron: '#48494b',\n        moss: '#8a9a5b',\n        snow: '#fffafa',\n        silver: '#d0d0d9',\n        cardinal: '#a31f34',\n        carmine: '#960018',\n    },\n    spacing: '2rem',\n    borderRadius: '5px',\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst ProgressBarWrapper = styled.div(\n    ({ theme, percentage, width = '100%' }) => `\n        border-bottom: 1px solid ${ theme.palette.moss };\n        position: relative;\n        height: ${ theme.spacing };\n        &::before {\n            content: \"${ percentage }%\";\n            position: absolute;\n            top: calc(100% + 10px);\n            left: 50%;\n            transform: translateX(-50%);\n            color: ${ theme.palette.silver };\n        }\n        &::after {\n            content: \"\";\n            position: absolute;\n            left: 0;\n            top: 0;\n            height: 100%;\n            width: ${ percentage }%;\n            background-color: ${ theme.palette.moss };\n        }\n    `\n)\nexport const ProgressBar = ({ percentage }) => {\n    return (\n        <ProgressBarWrapper percentage={ percentage } />\n    )\n}\n\nProgressBar.propTypes = {\n    percentage: PropTypes.number.isRequired,\n}\n\nProgressBar.defaultProps = {\n    percentage: 0,\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst StatesWrapper = styled.div(\n    ({ theme }) => `\n        width: 100%;\n        margin: auto;\n    `\n)\n\nconst StatesTitle = styled.div(\n    ({ theme }) => `\n        text-transform: uppercase;\n        letter-spacing: 2px;\n        color: ${ theme.palette.moss };\n        font-size: 80%;\n        background-color: ${ theme.palette.snow };\n        padding: calc(${ theme.spacing } / 4);\n        border-top: 1px solid ${ theme.palette.moss };\n        border-bottom: 1px solid ${ theme.palette.moss };\n    `\n)\n\nconst StatesList = styled.div(\n    ({ theme }) => `\n        display: flex;\n        flex-direction: column;\n        min-height: ${ theme.spacing };\n        @media (min-width: 768px) {\n            flex-direction: row;\n        }\n        justify-content: center;\n    `\n)\n\nexport const StatesListItem = styled.span(\n    ({ theme, active }) => `\n        text-align: center;\n        padding: calc(${ theme.spacing } / 4);\n        color: ${ theme.palette.moss };\n        font-size: 80%;\n        letter-spacing: 2px;\n        flex: 1;\n        transition: background-color 250ms;\n        background-color: ${ theme.palette.silver }22;\n        ${ active ? `\n            background-color: ${ theme.palette.moss };\n            color: ${ theme.palette.snow };\n            transition: opacity 200ms;\n            opacity: ${ active ? 1 : 0 };\n            content: \" *\";\n        ` : undefined }\n    `\n)\n\nexport const States = ({ children }) => {\n    return (\n        <StatesWrapper>\n            <StatesTitle>STATE</StatesTitle>\n            <StatesList>\n                { children }\n            </StatesList>\n        </StatesWrapper>\n    )\n}","import styled from 'styled-components'\n\nexport const ActionButtonGroup = styled.div(\n    ({ theme }) => `\n        display: flex;\n        min-height: 200px;\n        flex-direction: column;\n        justify-content: center;\n        margin: calc(${ theme.spacing } * 2) calc(${ theme.spacing }) calc(${ theme.spacing }) calc(${ theme.spacing });\n        align-items: stretch;\n        @media (min-width: 768px) {\n            margin: calc(${ theme.spacing } / 4);\n            flex-direction: row;\n            align-items: center;\n        }\n    `\n)\n\nexport const ActionButton = styled.button(\n    ({ theme }) => `\n        margin: 0.5rem 0.5rem;\n        padding: 0.25rem 0.5rem;\n        cursor: pointer;\n        &:disabled {\n            cursor: default;\n        }\n    `\n)\n\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { ProgressBar } from '../progress'\nimport { States, StatesListItem } from './state-list'\nimport { ActionButtonGroup, ActionButton } from './action-buttons'\nimport { useStateMachine } from '@mwatson/use-state-machine'\n\nconst MachineWrapper = styled.div(\n    ({ theme }) => `\n        // & * {border: 1px solid ${ theme.palette.moss };}\n        border: 1px solid ${ theme.palette.moss };\n        border-radius: ${ theme.borderRadius };\n        text-align: center;\n        width: 90%;\n        max-width: 768px;\n        margin: auto;\n        // padding: ${ theme.spacing };\n    `\n)\n\nconst INTERVAL = 25 // in milliseconds\nconst DISABLE_UNAVAILABLE_ACTIONS = true\n\nexport const Fsm = props => {\n    const machine = useStateMachine('zero', {\n        zero: {\n            on: {\n                START: 'running',\n            },\n        },\n        running: {\n            on: {\n                PAUSE: 'paused',\n                RESET: 'zero',\n                END: 'complete',\n            },\n        },\n        paused: {\n            on: {\n                START: 'running',\n                RESET: 'zero',\n            },\n        },\n        complete: {\n            on: {\n                RESET: 'zero',\n            },\n        },\n    })\n    const [progress, setProgress] = useState(0)\n\n    useEffect(() => {\n        switch (machine.state) {\n            case 'zero':\n                setProgress(0)\n                break\n            case 'running':\n                if (progress === 100) {\n                    machine.transition('END')\n                    return\n                }\n                const interval = setInterval(() => {\n                    setProgress(progress + 1)\n                }, INTERVAL)\n                return () => clearInterval(interval)\n            case 'complete':\n                setProgress(100)\n                break\n            default: // 'paused'\n                return\n        }\n    }, [machine, progress])\n\n    const handleChangeState = action => e => machine.transition(action)\n\n    return (\n        <MachineWrapper>\n            <ProgressBar percentage={ progress } />\n\n            <ActionButtonGroup>\n                {\n                    machine.actions.all.map(action => {\n                        return (\n                            <ActionButton\n                                key={ action }\n                                onClick={ handleChangeState(action) }\n                                disabled={ DISABLE_UNAVAILABLE_ACTIONS && !machine.actions.available.includes(action) }\n                            >\n                                { action }\n                            </ActionButton>\n                        )\n                    })\n                }\n            </ActionButtonGroup>\n\n            <States>\n                {\n                    Object.keys(machine.flow).map(s => (\n                        <StatesListItem key={ s } active={ machine.state === s }>{ s }</StatesListItem>\n                    ))\n                }   \n            </States>\n\n        </MachineWrapper>\n    )\n}\n\n","import React from 'react'\nimport { PageWrapper, Header, Main, Footer } from './components/layout'\nimport { ThemeProvider } from 'styled-components'\nimport { theme } from './theme'\nimport { Fsm } from './components/fsm'\n\nfunction App() {\n  return (\n    <ThemeProvider theme={ theme }>\n      <PageWrapper>\n        <Header>\n          ...\n        </Header>\n        <Main>\n          <Fsm />\n        </Main>\n        <Footer>\n          ...\n        </Footer>\n      </PageWrapper>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}